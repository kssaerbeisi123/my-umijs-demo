// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import _middlewares from "./_middlewares";
import handler from "/Users/kongshuangshuang/Desktop/demo/umi-blog-example/src/api/register.ts";
import { UmiApiRequest, UmiApiResponse } from "@fs/Users/kongshuangshuang/Desktop/demo/umi-blog-example/node_modules/@umijs/preset-umi/dist/features/apiRoute/index.js";

const apiRoutes = [{"path":"posts/[postId]","id":"posts/[postId]","file":"posts/[postId].ts","absPath":"/posts/[postId]","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client';\nimport { Redis } from \"@upstash/redis\";\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  let prisma: PrismaClient;\n  switch (req.method) {\n    case 'GET':\n      const redis = Redis.fromEnv();\n      let post = await redis.get('post-' + req.params.postId);\n      if (post) {\n        res.status(200).json(post);\n        return;\n      }\n      if (!post) {\n        prisma = new PrismaClient();\n        post = await prisma.post.findUnique({\n          where: { id: +req.params.postId },\n          include: { author: true }\n        });\n        if (post) {\n          res.status(200).json(post);\n        } else {\n          res.status(404).json({ error: 'Post not found.' });\n        }\n        await redis.set('post-' + req.params.postId, JSON.stringify(post));\n        await prisma.$disconnect();\n      }\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}\n"},{"path":"users/[userId]","id":"users/[userId]","file":"users/[userId].ts","absPath":"/users/[userId]","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client'\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    case 'GET':\n      const prisma = new PrismaClient();\n      const user = await prisma.user.findUnique({ where: { id: +req.params.userId } });\n      res.status(200).json(user);\n      await prisma.$disconnect()\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}"},{"path":"posts","id":"posts/index","file":"posts/index.ts","absPath":"/posts","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client'\nimport { verifyToken } from \"@/utils/jwt\";\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  let prisma: PrismaClient;\n  switch (req.method) {\n    case 'GET':\n      prisma = new PrismaClient();\n      const allPosts = await prisma.post.findMany({ include: { author: true } });\n      res.status(200).json(allPosts);\n      await prisma.$disconnect()\n      break;\n\n    case 'POST':\n      if (!req.cookies?.token) {\n        return res.status(401).json({\n          message: 'Unauthorized'\n        })\n      }\n      const authorId = (await verifyToken(req.cookies.token)).id;\n      prisma = new PrismaClient();\n      const newPost = await prisma.post.create({\n        data: {\n          title: req.body.title,\n          content: req.body.content,\n          createdAt: new Date(),\n          authorId,\n          tags: req.body.tags.join(','),\n          imageUrl: req.body.imageUrl\n        }\n      })\n      res.status(200).json(newPost);\n      await prisma.$disconnect()\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}\n"},{"path":"users","id":"users/index","file":"users/index.ts","absPath":"/users","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client'\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    case 'GET':\n      const prisma = new PrismaClient();\n      const allUsers = await prisma.user.findMany({\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          avatarUrl: true,\n          passwordHash: false\n        }\n      });\n      res.status(200).json(allUsers);\n      await prisma.$disconnect()\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}\n"},{"path":"register","id":"register","file":"register.ts","absPath":"/register","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { signToken } from \"@/utils/jwt\";\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    case 'POST':\n      try {\n        const prisma = new PrismaClient();\n        const user = await prisma.user.create({\n          data: {\n            email: req.body.email,\n            passwordHash: bcrypt.hashSync(req.body.password, 8),\n            name: req.body.name,\n            avatarUrl: req.body.avatarUrl\n          }\n        });\n        res.status(201)\n          .setCookie('token', await signToken(user.id))\n          .json({ ...user, passwordHash: undefined })\n        await prisma.$disconnect()\n      } catch (e: any) {\n        res.status(500).json({\n          result: false,\n          message: typeof e.code === 'string' ? 'https://www.prisma.io/docs/reference/api-reference/error-reference#' + e.code.toLowerCase() : e\n        })\n      }\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}"},{"path":"/","id":"index","file":"index.ts","absPath":"/","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  res.status(200).json({\n    posts_url: req.headers.host + '/api/posts',\n    post_url: req.headers.host + \"/api/posts/{post_id}\",\n    users_url: req.headers.host + '/api/users',\n    user_url: req.headers.host + \"/api/users/{user_id}\",\n  })\n}"},{"path":"login","id":"login","file":"login.ts","absPath":"/login","__content":"import { UmiApiRequest, UmiApiResponse } from \"umi\";\nimport { PrismaClient } from '@prisma/client'\nimport bcrypt from \"bcryptjs\";\nimport { signToken } from \"@/utils/jwt\";\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    case 'POST':\n      try {\n        const prisma = new PrismaClient();\n        const user = await prisma.user.findUnique({\n          where: { email: req.body.email }\n        });\n        if (!user || !bcrypt.compareSync(req.body.password, user.passwordHash)) {\n          return res.status(401).json({\n            message: 'Invalid email or password'\n          });\n        }\n        res.status(200)\n          .setCookie('token', await signToken(user.id))\n          .json({ ...user, passwordHash: undefined });\n        await prisma.$disconnect()\n      } catch (error: any) {\n        res.status(500).json(error);\n      }\n      break;\n    default:\n      res.status(405).json({ error: 'Method not allowed' })\n  }\n}\n"}];

export default async (req, res) => {

  const umiReq = new UmiApiRequest(req, apiRoutes);
  await umiReq.readBody();
  const umiRes = new UmiApiResponse(res);
  await new Promise((resolve) => _middlewares(umiReq, umiRes, resolve));
  await handler(umiReq, umiRes);

}
